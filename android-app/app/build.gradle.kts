import org.gradle.internal.os.OperatingSystem
import java.io.File

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.curtesmalteser.hellorust"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.curtesmalteser.hellorust"
        minSdk = 28
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"
        ndkVersion = "28.2.13676358"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = "21"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

// cargo install cargo-ndk

val ndkApi = android.defaultConfig.minSdk
val rustLibPath = "$projectDir/../../hello_rust_lib"

tasks.register<Exec>("buildRust") {
    group = "rust"
    val cargoPath = "${System.getProperty("user.home")}/.cargo/bin/cargo"
    workingDir(rustLibPath)
    commandLine(
        cargoPath, "ndk",
        "-t", "arm64-v8a",
        "-t", "armeabi-v7a",
        "-t", "x86",
        "-t", "x86_64",
        "-P", "$ndkApi",
        "-o", "$projectDir/src/main/jniLibs",
        "build", "--release"
    ).apply {
        println("run if fails: cd $rustLibPath && ${commandLine.joinToString(separator = " ")}\n")
    }
}

tasks.named("preBuild") {
    dependsOn("buildRust")
}

tasks.named("preBuild") {
    dependsOn("clean")
}

val targets = listOf(
    "aarch64-linux-android",
    "armv7-linux-androideabi",
    "x86_64-linux-android",
    "i686-linux-android",
)

val process = ProcessBuilder("rustup", "target", "add", *targets.toTypedArray())
    .redirectErrorStream(true)
    .start()!!
if (process.waitFor() != 0) {
    throw IllegalStateException(process.inputStream.bufferedReader().readText())
}

val os = OperatingSystem.current()!!
val host = when {
    os.isLinux -> "linux-x86_64"
    os.isMacOsX -> "darwin-x86_64"
    os.isWindows -> "windows-x86_64"
    else -> throw IllegalStateException("Unknown OS ($os)")
}

val ndkPath = android.sdkDirectory.resolve("ndk")
val ndkLlvmBin = "$ndkPath/${android.ndkVersion}/toolchains/llvm/prebuilt/$host/bin/"

val libConfigDir = File("$rustLibPath/.cargo/")
libConfigDir.mkdirs()
File(libConfigDir, "config.toml").writeText(
"""# DON'T EDIT! Generated by $projectDir/build.gradle.kts

[target.aarch64-linux-android]
ar = "${ndkLlvmBin}aarch64-linux-android-ar"
linker = "${ndkLlvmBin}aarch64-linux-android$ndkApi-clang"

[target.armv7-linux-androideabi]
ar = "${ndkLlvmBin}arm-linux-androideabi-ar" # not 'armv7'
linker = "${ndkLlvmBin}armv7a-linux-androideabi$ndkApi-clang" # not 'armv7'

[target.x86_64-linux-android]
ar = "${ndkLlvmBin}x86_64-linux-android-ar"
linker = "${ndkLlvmBin}x86_64-linux-android$ndkApi-clang"

[target.i686-linux-android]
ar = "${ndkLlvmBin}i686-linux-android-ar"
linker = "${ndkLlvmBin}i686-linux-android$ndkApi-clang"
"""
)
